name: tokengas-prod

services:
  db:
    image: postgres:16-alpine
    container_name: tokengas-db-prod
    restart: always
    environment:
      POSTGRES_DB: tokengas_terminales
      POSTGRES_USER: koresoft_api
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U koresoft_api -d tokengas_terminales"]
      interval: 10s
      timeout: 3s
      retries: 10

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: tokengas-api-prod
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://koresoft_api:${POSTGRES_PASSWORD}@db:5432/tokengas_terminales
      DB_POOL_MIN: "2"
      DB_POOL_MAX: "10"
      API_KEY: ${API_KEY}                 
      ENROLL_API_KEY: ${ENROLL_API_KEY}
      JWT_PUBLIC_PATH: /etc/koresoft-secrets/jwt.pub
      JWT_PRIVATE_PATH: /etc/koresoft-secrets/jwt.key
      JWT_KID: srv-2025-09-k1
    volumes:
      - /etc/koresoft-secrets:/etc/koresoft-secrets:ro
    ports:
      - "127.0.0.1:3301:3001"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3001/healthz >/dev/null || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 10
      start_period: 20s

  migrator:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: tokengas-migrate-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://koresoft_api:${POSTGRES_PASSWORD}@db:5432/tokengas_terminales
    entrypoint: ["npm","run","db:migrate"]
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
